name: C++ CI Workflow

on:
  push:
  pull_request:
  
  
jobs:
  build:
    name: '[${{ matrix.os }}@${{ matrix.build_type }}]'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build_type: [Release, Debug]
        os: [windows-latest]

    steps:
    - uses: actions/checkout@master
        
    # Print environment variables to simplify development and debugging
    - name: Environment Variables
      shell: bash
      run: env
        
    # ============
    # DEPENDENCIES
    # ============
    
    - name: Dependencies [Windows]
      if: matrix.os == 'windows-latest'
      shell: bash
      run: |
        # To avoid regression due to GitHub Action images updated, use a fixed release of vcpkg
        cd ${VCPKG_INSTALLATION_ROOT}
        git fetch --unshallow
        git checkout v2020.01
        ./bootstrap-vcpkg.sh
        ./vcpkg.exe --triplet x64-windows ccd eigen3
        
    - name: Source-based Dependencies [Windows] 
      if: matrix.os == 'windows-latest'
      shell: bash
      run: |
        # octomap in vcpkg is quite old, so we compile it from source
        git clone --branch v1.9.3 https://github.com/OctoMap/octomap
        cd octomap
        mkdir -p build
        cd build
        cmake -A x64 -DCMAKE_TOOLCHAIN_FILE=${VCPKG_INSTALLATION_ROOT}/scripts/buildsystems/vcpkg.cmake -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/install ..
        cmake --build . --config ${{ matrix.build_type }} --target INSTALL 
 
    # ===================
    # CMAKE-BASED PROJECT
    # ===================
    
    - name: Configure [Windows]
      # Use bash also on Windows (otherwise cd, mkdir, ... do not work)
      if: matrix.os == 'windows-latest'
      shell: bash
      run: |
        mkdir -p build
        cd build
        cmake -A x64 -DCMAKE_TOOLCHAIN_FILE=${VCPKG_INSTALLATION_ROOT}/scripts/buildsystems/vcpkg.cmake -DCMAKE_PREFIX_PATH=${GITHUB_WORKSPACE}/install \
              -DBUILD_TESTING:BOOL=ON -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/install ..
      
    - name: Build
      shell: bash
      run: |
        cd build
        cmake --build . --config ${{ matrix.build_type }}
        
    - name: Test
      shell: bash
      run: |
        cd build
        ctest --output-on-failure -C ${{ matrix.build_type }} . 
        
    - name: Install [Windows]
      if: matrix.os == 'windows-latest'
      shell: bash
      run: |
        cd build
        cmake --build . --config ${{ matrix.build_type }} --target INSTALL
